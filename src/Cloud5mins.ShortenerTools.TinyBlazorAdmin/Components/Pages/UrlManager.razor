@page "/urlmanager"

@using System.Net
@using Cloud5mins.ShortenerTools.Core.Domain
@using Cloud5mins.ShortenerTools.Core.Messages;
@inject UrlManagerClient urlManager
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<PageTitle>Url Manager</PageTitle>

<h1>Urls Manager</h1>
<h3>Create, Edit, Achives your URLs</h3>

<FluentButton OnClick="@(CreateShortUrl)" Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size16.Add())">Add New Url</FluentButton>

<div style="height: 380px; overflow-x:auto; display:flex;">
    <FluentDataGrid Id="grdUrls" 
                    Items="@urlList"
                    ResizableColumns=true
                    AllowSorting=true
                    Pagination="@pagination">
        <ChildContent>
            <TemplateColumn Width="70px" Sortable="false">
                <FluentButton OnClick="@(async () => await CopyToClipboardAsync(context!.ShortUrl))" IconEnd="@(new Icons.Regular.Size16.Copy())" Title="Copy" />
            </TemplateColumn>
            <TemplateColumn Width="115px" Title="Schedule(s)" Sortable="true" SortBy="@sortBySchedules">
                <span>@(context!.Schedules?.Count ?? 0)</span>
            </TemplateColumn>
            <TemplateColumn Title="Vanity" Width="150px" Sortable="true" SortBy="@sortByVanities">
                <FluentAnchor Href="@context!.ShortUrl" Target="_blank" Appearance="Appearance.Hypertext">@context!.RowKey</FluentAnchor>
            </TemplateColumn>
            <PropertyColumn Title="Title" Property="@(c => c!.Title)" Sortable="true"/>
            <PropertyColumn Title="Url" Property="@(c => c!.Url)" Sortable="true"/>
            <TemplateColumn Title="Clicks" Width="110px" Align="Align.End" Sortable="true" SortBy="@sortByClicks">
                <span>@context.Clicks</span>
                <FluentButton OnClick="@(() => NavigateToStats(context.RowKey))" IconEnd="@(new Icons.Regular.Size16.ChartMultiple())" />
            </TemplateColumn>
            <TemplateColumn Width="100px" Sortable="false">
                <FluentButton OnClick="@(() => EditShortUrl(context))" IconEnd="@(new Icons.Regular.Size16.Edit())" Title="Edit" />
                <FluentButton OnClick="@(async () => await ArchiveShortUrl(context))" IconEnd="@(new Icons.Regular.Size16.Archive())" Title="Archive" />
            </TemplateColumn>
        </ChildContent>
        <EmptyContent>
            <FluentIcon Value="@(new Icons.Filled.Size16.Crown())" Color="@Color.Accent" />&nbsp; Nothing to see here. Carry on!
        </EmptyContent>
    </FluentDataGrid>
</div>
<FluentPaginator State="@pagination" />


@if (ShowCreatePopup)
{
    @* <div class="modal fade show" id="createPopup" style="display:block" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">

            <!-- Modal Header -->
            <div class="modal-header">
                <h4 class="modal-title">Short Url Request</h4>
                <button type="button" class="close" @onclick="@ClosePopup">&times;</button>
            </div>

            <!-- Modal body -->
            <div class="modal-body">
                <EditForm Model="shortUrlRequest" OnValidSubmit="SaveShortUrl">
                    <DataAnnotationsValidator />
                    <div class="row">
                        <div class="col-xs-12 col-sm-12 col-lg-12 col-md-12">
                            <SfTextBox id="title" Placeholder="Title" FloatLabelType="@FloatLabelType.Auto"
                                @bind-Value="shortUrlRequest.Title"></SfTextBox>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xs-12 col-sm-12 col-lg-12 col-md-12">
                            <SfTextBox id="url" Placeholder="Url" FloatLabelType="@FloatLabelType.Auto"
                                @bind-Value="shortUrlRequest.Url"></SfTextBox>
                            <ValidationMessage For="@(() => shortUrlRequest.Url)" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xs-12 col-sm-12 col-lg-12 col-md-12">
                            <SfTextBox id="vanity" Placeholder="Vanity" FloatLabelType="@FloatLabelType.Auto"
                                @bind-Value="shortUrlRequest.Vanity"></SfTextBox>
                        </div>
                    </div>

                    <div>
                        <SchedulesComponent schedules="shortUrlRequest.Schedules"></SchedulesComponent>
                    </div>
                </EditForm>
            </div>

            <!-- Modal footer -->
            <div class="modal-footer">
                <button type="button" class="btn" @onclick="@ClosePopup">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick=@SaveShortUrl>Save</button>
            </div>

        </div>
    </div>
</div> *@

}


@if (ShowEditPopup)
{
    @* <div class="modal fade show" id="myModal" style="display:block" aria-modal="true" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">

                <!-- Modal Header -->
                <div class="modal-header">
                    <h4 class="modal-title">Confirm action</h4>
                    <button type="button" class="close" @onclick="@ClosePopup">&times;</button>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    <EditForm Model="editedUrl" OnValidSubmit="SaveUpdatedShortUrl">
                        <DataAnnotationsValidator />
                        <div>
                            <label for="edit-title">Title</label>
                            <InputText id="edit-title" class="form-control" placeholder="Title or description for this URL" @bind-Value="editedUrl.Title" />
                            <ValidationMessage For="@(() => editedUrl.Title)" />
                        </div>
                        <br />
                        <div>
                            <label for="edit-url">The Url to redirect</label>
                            <InputText id="edit-url" class="form-control" placeholder="The Url to redirect" @bind-Value="editedUrl.Url" />
                            <ValidationMessage For="@(() => editedUrl.Url)" />
                        </div>
                        <div>
                            <SchedulesComponent schedules="@editedUrl.Schedules"></SchedulesComponent>
                        </div>
                    </EditForm>
                </div>

                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" class="btn" @onclick="@ClosePopup">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick=@SaveUpdatedShortUrl>Save</button>
                </div>

            </div>
        </div>
    </div> *@

} 

@code {
    bool ShowCreatePopup = false;
    bool ShowEditPopup = false;
    private ListResponse urls = new ListResponse();

    IQueryable<ShortUrlEntity>? urlList;
    PaginationState pagination = new PaginationState { ItemsPerPage = 20 };
    ShortUrlRequest shortUrlRequest = new ShortUrlRequest();
    ShortUrlEntity editedUrl;
    public List<ShortUrlEntity> gridData { get; set; }

    GridSort<ShortUrlEntity> sortByClicks = GridSort<ShortUrlEntity>.ByDescending(p => p.Clicks);
    GridSort<ShortUrlEntity> sortBySchedules = GridSort<ShortUrlEntity>.ByDescending(p => p.Schedules.Count);
    GridSort<ShortUrlEntity> sortByVanities = GridSort<ShortUrlEntity>.ByAscending(p => p.RowKey);

    protected override async Task OnInitializedAsync()
    {
        await RefreshGrid();
    }

    private async Task RefreshGrid()
    {
        try
        {
            urlList = await urlManager.GetUrls();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    private async Task UpdateUIList()
    {
        await RefreshGrid();
        StateHasChanged();
    }
    private async Task SaveShortUrl()
    {
        @* ShowCreatePopup = false;

        try
        {
            await Http.PostAsJsonAsync<ShortUrlRequest>("/api/UrlCreate", shortUrlRequest);
            await UpdateUIList(); *@
            @* await grdUrls.ClearFilteringAsync();
                await grdUrls.FilterByColumnAsync("RowKey", "equal", shortUrlRequest.Vanity); *@
        @* }
        catch (System.Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }  *@
    }

    void ClosePopup()
    {
        ShowCreatePopup = false;
        ShowEditPopup = false;
    }

    void CreateShortUrl()
    {
        shortUrlRequest = new ShortUrlRequest();
        ShowCreatePopup = true;
    }

    [Inject] public IJSRuntime JsRuntime { get; set; }
    public async Task CopyToClipboardAsync(string url)
    {
        await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", url);
    }


    void EditShortUrl(ShortUrlEntity urlEntity)
    {
        editedUrl = urlEntity;
        ShowEditPopup = true;
    }

    private async Task SaveUpdatedShortUrl()
    {
        @* ShowEditPopup = false;
        await Http.PostAsJsonAsync<ShortUrlEntity>("/api/UrlUpdate", editedUrl);
        await UpdateUIList(); *@
    }

    private void NavigateToStats(string vanity){
        NavigationManager.NavigateTo("/Statistics/" + vanity);
    }

    public async Task ArchiveShortUrl(ShortUrlEntity urlEntity)
    {
        @* await Http.PostAsJsonAsync<ShortUrlEntity>("/api/UrlArchive", urlEntity);
        await UpdateUIList(); *@
    }

}
